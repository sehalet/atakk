(function () {
    'use strict';

    const scriptData = {
        name: 'Mass Attack Planner',
        version: 'v1.2 (GitHub version)',
    };

    // BaÅŸlangÄ±Ã§: Unit bilgilerini Ã§ek
    fetchUnitInfo();

    function fetchUnitInfo() {
        jQuery.ajax({
            url: '/interface.php?func=get_unit_info',
        }).done(function (response) {
            const unitInfo = xml2json($(response));
            initPlanner(unitInfo);
        });
    }

    function initPlanner(unitInfo) {
        const arrivalTime = formatDateTime(new Date());
        const content = `
            <div style="margin-bottom:15px;">
                <label>Arrival Time</label>
                <input id="arrival_time" type="text" value="${arrivalTime}" style="width:100%; margin-bottom:10px;">
            </div>
            <input type="hidden" id="nobleSpeed" value="${unitInfo.config['snob'].speed}" />
            <div style="display:flex; gap:10px; margin-bottom:15px;">
                <div style="flex:1;">
                    <label>Slowest Nuke unit</label>
                    <select id="nuke_unit" style="width:100%;">
                        <option value="${unitInfo.config['axe'].speed}">Axe</option>
                        <option value="${unitInfo.config['light'].speed}">LC</option>
                        <option value="${unitInfo.config['heavy'].speed}">HC</option>
                        <option value="${unitInfo.config['ram'].speed}" selected>Ram/Cat</option>
                    </select>
                </div>
                <div style="flex:1;">
                    <label>Slowest Support unit</label>
                    <select id="support_unit" style="width:100%;">
                        <option value="${unitInfo.config['spear'].speed}">Spear</option>
                        <option value="${unitInfo.config['sword'].speed}" selected>Sword</option>
                        <option value="${unitInfo.config['spy'].speed}">Spy</option>
                        <option value="${unitInfo.config['heavy'].speed}">HC</option>
                        <option value="${unitInfo.config['catapult'].speed}">Cat</option>
                    </select>
                </div>
            </div>
            <div style="margin-bottom:15px;">
                <label>Targets Coords</label>
                <textarea id="target_coords" style="width:100%; height:60px;"></textarea>
            </div>
            <div style="display:flex; gap:10px; margin-bottom:15px;">
                <div style="flex:1;">
                    <label>Nobles Coords</label>
                    <textarea id="nobel_coords" style="width:100%; height:60px;"></textarea>
                </div>
                <div style="flex:1;">
                    <label>Nukes Coords</label>
                    <textarea id="nuke_coords" style="width:100%; height:60px;"></textarea>
                </div>
                <div style="flex:1;">
                    <label>Support Coords</label>
                    <textarea id="support_coords" style="width:100%; height:60px;"></textarea>
                </div>
            </div>
            <div>
                <button id="plan_btn" style="padding:10px 20px; background:#603000; color:#fff; border:none; cursor:pointer;">
                    Get Plan!
                </button>
            </div>
            <div style="margin-top:15px;">
                <label>Results</label>
                <textarea id="results" style="width:100%; height:200px;"></textarea>
            </div>
        `;

        const win = window.open('', '', 'width=550,height=650,scrollbars=1');
        win.document.write(`
            <!DOCTYPE html>
            <html><head><title>${scriptData.name}</title></head><body>${content}
            <script>
                ${getDistance.toString()}
                ${getNearestVillage.toString()}
                ${calculateTravelTime.toString()}
                ${getDepartureTime.toString()}
                ${formatDateTime.toString()}
                ${autoPlan.toString()}
                document.getElementById('plan_btn').addEventListener('click', autoPlan);
            <\/script></body></html>
        `);
    }

    // YardÄ±mcÄ± Fonksiyonlar
    function xml2json($xml) {
        const data = {};
        $.each($xml.children(), function () {
            const $this = $(this);
            data[$this.prop('tagName')] = $this.children().length > 0
                ? xml2json($this)
                : $.trim($this.text());
        });
        return data;
    }

    function formatDateTime(date) {
        const z = n => String(n).padStart(2, '0');
        return \`\${date.getFullYear()}-\${z(date.getMonth()+1)}-\${z(date.getDate())} \${z(date.getHours())}:\${z(date.getMinutes())}:\${z(date.getSeconds())}\`;
    }

    function getDistance(a, b) {
        if (!a || !b) return Infinity;
        const [x1, y1] = a.split('|').map(Number), [x2, y2] = b.split('|').map(Number);
        return Math.hypot(x1 - x2, y1 - y2);
    }

    function getNearestVillage(target, list) {
        let min = Infinity, closest = null;
        list.forEach(v => {
            if (v) {
                const d = getDistance(target, v);
                if (d < min) { min = d; closest = v; }
            }
        });
        return {village: closest, distance: min};
    }

    function calculateTravelTime(distance, speed) {
        return distance * 60 * 1000 / speed;
    }

    function getDepartureTime(arrivalStr, dist, speed) {
        const arr = new Date(arrivalStr), dep = new Date(arr - calculateTravelTime(dist, speed));
        return formatDateTime(dep);
    }

    function autoPlan() {
        const arr = document.getElementById('arrival_time').value;
        const targets = document.getElementById('target_coords').value.trim().split(/\s+/);
        const nobles = document.getElementById('nobel_coords').value.trim().split(/\s+/);
        const nukes = document.getElementById('nuke_coords').value.trim().split(/\s+/);
        const supports = document.getElementById('support_coords').value.trim().split(/\s+/);
        const ns = Number(document.getElementById('nobleSpeed').value);
        const us = Number(document.getElementById('nuke_unit').value);
        const ss = Number(document.getElementById('support_unit').value);

        let output = '';
        targets.forEach(t => {
            if (!t.includes('|')) return;
            const nn = getNearestVillage(t, nobles);
            const nk = getNearestVillage(t, nukes);
            const sp = getNearestVillage(t, supports);
            output += \`
ðŸŽ¯ Target: \${t}
Noble: \${nn.village || '-'} (Dep: \${nn.village ? getDepartureTime(arr, nn.distance, ns) : 'N/A'})
Nuke: \${nk.village || '-'} (Dep: \${nk.village ? getDepartureTime(arr, nk.distance, us) : 'N/A'})
Support: \${sp.village || '-'} (Dep: \${sp.village ? getDepartureTime(arr, sp.distance, ss) : 'N/A'})
----------------------
\`;
        });
        document.getElementById('results').value = output;
    }

})();
